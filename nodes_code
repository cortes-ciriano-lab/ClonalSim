# temp code to add

from treeswift import Tree, Node

tree_clusters = {
    "1": {
        "9",
        "5",
        "6",
        "7",
        "8",
    },
    "2": {
        "9",
        "5",
    },
    "3": {
        "6",
        "7",
        "8",
    },
    "4": {
        "9",
    },
    "5": {},
    "6": {},
    "7": {},
    "8": {},
    "9": {},
}

def clusters_to_nodes(tree_clusters):
    label_to_node = {cluster: Node(label=cluster, edge_length=1) for cluster in tree_clusters}

    # Connect each node with it's leaves 
    for parent_label, leaf_labels in tree_clusters.items():
        parent_node = label_to_node[parent_label]
        for leaf_label in leaf_labels:
            leaf_node = label_to_node[leaf_label]
            parent_node.add_child(leaf_node)

    # Connect each node with all descendants
    for node1 in label_to_node.values():
        for node2 in label_to_node.values():
            if node1 == node2:
                continue

            possible_parent = node1 if len(node1.child_nodes()) > len(node2.child_nodes()) else node2
            possible_child = node2 if possible_parent is node1 else node1
            
            parent_leaf_labels = {node.label for node in possible_parent.child_nodes()}
            child_leaf_labels = {node.label for node in possible_child.child_nodes()}
            is_descendant = child_leaf_labels.issubset(parent_leaf_labels)

            if is_descendant and possible_child not in possible_parent.child_nodes() and possible_child.child_nodes():
                possible_parent.add_child(possible_child)

 #   Remove non-direct descendants
    next_nodes = {label_to_node["1"]}
    while next_nodes:
        node = next_nodes.pop()
        for child in node.child_nodes():
            next_nodes.add(child)
            child.set_parent(node)
            for grandchild in child.child_nodes():
                if grandchild in node.child_nodes():
                    node.remove_child(grandchild)

    # Create the tree using TreeSwift
    tree = Tree()
    tree.root = label_to_node["1"]

    return tree


test_tree = clusters_to_nodes(tree_clusters)
test_tree.draw()